Email
=====
email:		jcooteam@gmail.com
Password:	JCOO_Team2020

GitHub
======
User:		JCOOTeam
password:	JCOO_Team2020
email:		jcooteam@gmail.com	


Basic git commands
================== 

GIT CREATE
----------
 Clone an existing repository
 $ git clone ssh://user@domain.com/repo.git
 
 Create a new local repository
  $ git init

 
 LOCAL CHANGES
---------------
 View Changed files in your working directory
  $ git status

 View Changes to tracked files
 $ git diff

 To Add all current changes to the next commit
 $ git add .

 To Add some changes in <file> to the next commit
 $ git add -p <file>

 Commit all local changes in tracked files
 $ git commit -a

 Commit previously staged changes
 $ git commit

 Change the last commitDon‘t amend published commits!
 $ git commit --amend


COMMIT HISTORY
--------------
 Show all commits, starting with newest
 $ git log

 Show changes over time for a specific file
 $ git log -p <file>

 Who changed what and when in <file>
 $ git blame <file>


BRANCHES & TAGS
---------------
 List all existing branches
 $ git branch -av 

 Switch HEAD branch
 $ git checkout <branch>

 Create a new branch basedon your current HEAD
 $ git branch <new-branch>

 Create a new tracking branch based on a remote branch
 $ git checkout --track <remote/branch>


 Delete a local branch
 $ git branch -d <branch>

 Mark the current commit with a tag
 $ git tag <tag-name>



UPDATE & PUBLISH
----------------
 List all currently configured remotes
 $ git remote -v

 Show information about a remote
 $ git remote show <remote>

 Add new remote repository, named <remote>
 $ git remote add <shortname> <url>

 Download all changes from <remote>, but don‘t integrate into HEAD
 $ git fetch <remote>

 Download changes and directly merge/integrate into HEAD
 $ git pull <remote> <branch>

 Publish local changes on a remote
 $ git push <remote> <branch>

 Delete a branch on the remote
 $ git branch -dr <remote/branch>

 Publish your tag s
 $ git push --tags



MERGE & REBASE
--------------
 Merge <branch> into your current HEAD
 $ git merge <branch>

 Rebase your current HEAD onto <branch> Don‘t rebase published commits!
 $ git rebase <branch>

 Abort a rebase
 $ git rebase --abort

 Continue a rebase after resolving conflicts
 $ git rebase --continue

 Use your configured merge tool to solve conflicts
 $ git mergetool

 Use your editor to manually solve conflicts and (after resolving) mark file as resolved
 $ git add <resolved-file>
 $ git rm <resolved-file>



UNDO
-----

 Discard all local changes in your working  directory
 $ git reset --hard HEAD

 Discard local changes in a specific file
 $ git checkout HEAD <file>

 Revert a commit (by producing a new commit with contrary changes)
 $ git revert <commit>

 Reset your HEAD pointer to a previous commit and discard all changes since then
 $ git reset --hard <commit>

 preserve all changes as unstaged changes
 $ git reset <commit>

 preserve uncommitted local changes
 $ git reset --keep <commit>
======================================================================================


Commands for setting up my git repository
cd		//Change directory
cd /c		//Will take you into c directory
ls		//Will list all files in the folder	
cd git/		//Will take you into the folder git
ls		//Will list all files in this git folder


To synchronise our git with our pc/Folder on our pc, we need to do the following:
 - Configure your git (User name) by typing: git config --global user.name "Your git user name"  //Our git user name is JCOOTeam
 - Configure your git (Email) by typing: git config --global user.email  anf then your your git email address not in quote // jcooteam@gmail.com
 - Clone/syncronise your pc with git by typing: git clone (url) --> The url is the url of your git repo. In this case --> https://github.com/JCOOTeam/NASAS_Project.git
 - After clone, you can type-in $ ls to see the synchronized folder of your git
 - Type-in $ cd your git folder name and then / to go to your folder
 - Type in ls to list all files in your synchronized git folder then you can see your README.md file 

To add created file to your git, then do:
 - git add (Your file name) --> In this case --> Email_Git_Info_Git_Basic_Command

To get your status command, then do:
 - git status
To make this new created file visible on git repo, then you have to commit it yb:
 - git commit -m "(Commit message") filename In this case--> Email_Git_Info_Git_Basic_Command.txt
